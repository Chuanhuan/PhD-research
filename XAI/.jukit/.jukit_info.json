{"cmd": "\n\n# Function to plot original and reconstructed images\ndef plot_reconstructed_images(m, data_loader, num_images=10):\n    m.eval()\n\n    with torch.no_grad():\n        for batch_idx, (data, target) in enumerate(data_loader):\n            # X = X.view(-1, X_dim).to(device)\n            # print(f\"X shape: {X.shape}\")\n            recon_x, mu, logvar = m(data.to(device))\n            break\n\n    data = data.cpu().numpy()\n    X_sample = recon_x.cpu().numpy()\n    # std = torch.exp(0.5 * logvar).reshape(logvar.shape[0], 10, 10)\n    # std_interpolate = (\n    #     nn.Upsample(size=(28, 28), mode=\"nearest\")(std.unsqueeze(1))\n    #     .squeeze(1)\n    #     .cpu()\n    #     .numpy()\n    # )\n\n    fig, axes = plt.subplots(2, num_images, figsize=(num_images, 2))\n    for i in range(num_images):\n        axes[0, i].imshow(data[i].reshape(28, 28), cmap=\"gray\")\n        axes[0, i].axis(\"off\")\n        axes[1, i].imshow(X_sample[i].reshape(28, 28), cmap=\"gray\")\n        axes[1, i].axis(\"off\")\n        # axes[2, i].imshow(std_interpolate[i], cmap=\"gray\")\n        # axes[2, i].axis(\"off\")\n        # axes[2, i].set_title(\"Std Dev\")\n    plt.show()\n\n\nplot_reconstructed_images(VAE_cluster, testloader)\n", "cmd_opts": " --cell_id=5agHvCgelf -s", "import_complete": 1, "terminal": "kitty"}