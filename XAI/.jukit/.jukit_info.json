{"cmd": "\n\"\"\"## Load CNN Weights\"\"\"\n\n# save the mode weights in .pth format (99.25% accuracy\n# torch.save(model.state_dict(), 'CNN_MNSIT.pth')\n\n# NOTE: load the model weights\n\n\nmodel.load_state_dict(torch.load(\"./CNN_MNSIT.pth\", weights_only=True))\n# Set the model to evaluation mode\nmodel.eval()\n\n# Initialize variables to track the number of correct predictions and the total number of samples\ncorrect = 0\ntotal = 0\n\n# Disable gradient calculation for evaluation\nwith torch.no_grad():\n    for data, target in testloader:\n        data, target = data.to(device), target.to(device)\n        outputs = model(data)\n        _, predicted = torch.max(outputs, 1)\n        total += target.size(0)\n        correct += (predicted == target).sum().item()\n\n# Calculate and print the accuracy\naccuracy = 100 * correct / total\nprint(f\"Accuracy of the model on the test images: {accuracy:.2f}%\")\n\n# %%\n\"\"\"## Inital image setup\"\"\"\n\nimg_id = 1\ninput = testset_8[img_id]\ntrue_y = input[1]\n\nimg = input[0].squeeze(0).clone().to(device)\npredicted = model(img.unsqueeze(0).unsqueeze(0)).argmax().item()\nprob = F.softmax(model(img.unsqueeze(0).unsqueeze(0)), dim=1)[0][predicted].item()\n\nimg_cpu = img.cpu().numpy()\nplt.imshow(img_cpu, cmap=\"gray\")\nplt.savefig(f\"ID {img_id}-Digit {input[1]} original_image.png\")\nprint(f\"ID: {img_id}, True y = {input[1]}, probability: {prob:.5f}\")\nplt.show()\nplt.clf()\n\n", "cmd_opts": " --cell_id=AscxxvLuFy -s", "import_complete": 1, "terminal": "kitty"}