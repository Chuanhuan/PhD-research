{"cmd": "\n# x = img.clone().flatten()\n# patch_model = Patch_Model(x.size(0)).to(device)\n\nx = img.clone()\nx = x.unsqueeze(0).unsqueeze(0).to(device)\ninput_hight = img.shape[0]\ninput_width = img.shape[1]\n\npatch_model = Patch_Model(1, input_hight, input_width).to(device)\noptimizer_patch = torch.optim.Adam(patch_model.parameters(), lr=1e-4)\n\nmodel.eval()\nfor i in range(2000):\n    w = patch_model(x)\n    wx = w * x\n    model.zero_grad()\n    y0 = model(img.unsqueeze(0).unsqueeze(0))\n    y1 = model(wx.reshape(1, 1, 28, 28))\n\n    loss = F.mse_loss(y0, y1) + w.norm(1) + torch.sum(w)\n    # loss = F.cross_entropy(y0, y1)+w.norm(1) + torch.sum(w)\n    # loss = -torch.sum(w*torch.log(w+1e-6))\n\n    loss.backward()\n    optimizer_patch.step()\n    # print(f\"Loss: {loss.item()}\")\n\n    # Visualize wx image and w points\n    if i % 200 == 0:  # Show every 10 iterations\n        wx_image = wx.reshape(28, 28).cpu().detach().numpy()\n        w_image = w.reshape(28, 28).cpu().detach().numpy()\n\n        plt.imshow(wx_image, cmap=\"gray\")\n        plt.title(f\"Iteration {i}\")\n\n        # Plot w points with different colors\n        y_coords, x_coords = np.where(\n            w_image > 0\n        )  # Get coordinates of positive weights\n        colors = w_image[y_coords, x_coords]  # Use weights as colors\n\n        plt.scatter(x_coords, y_coords, c=colors, cmap=\"viridis\", edgecolor=\"red\")\n        plt.colorbar()  # Add a color bar to show the weight values\n        plt.show()\n", "cmd_opts": " --cell_id=SI0zhI7YHo -s", "import_complete": 1, "terminal": "tmux"}