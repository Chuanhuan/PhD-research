{"cmd": "\ninput_height = 28\ninput_width = 28\n\npatch_model = Patch_Model(1, input_height, input_width).to(device)\noptimizer_patch = torch.optim.Adam(patch_model.parameters(), lr=1e-4)\n\nmodel.eval()\nfor epoch in range(10):  # Number of epochs\n    for batch_idx, (data, target) in enumerate(trainloader):\n        data = data.to(device)\n        batch_size = data.size(0)\n        w = patch_model(data)\n        wx = w * data\n        model.zero_grad()\n        y0 = model(data)\n        y1 = model(wx)\n        loss = F.mse_loss(y0, y1) + w.norm(1) + torch.sum(w)\n        loss.backward()\n        optimizer_patch.step()\n\n        if batch_idx == 0:\n            print(f\"Epoch: {epoch}, Batch: {batch_idx}, Loss: {loss.item()}\")\n\n            # Visualize wx image and w points\n            wx_image = wx[0].reshape(28, 28).cpu().detach().numpy()\n            w_image = w[0].reshape(28, 28).cpu().detach().numpy()\n\n            plt.imshow(wx_image, cmap=\"gray\")\n            plt.title(f\"Epoch {epoch}, Batch {batch_idx}\")\n\n            # Plot w points with different colors\n            y_coords, x_coords = np.where(w_image > 0)  # Get coordinates of positive weights\n            colors = w_image[y_coords, x_coords]  # Use weights as colors\n\n            plt.scatter(x_coords, y_coords, c=colors, cmap=\"viridis\", edgecolor=\"red\")\n            plt.colorbar()  # Add a color bar to show the weight values\n            plt.savefig(f\"w_image_iteration_{batch_idx}.png\")\n            # plt.show()\n            plt.clf()\n\n", "cmd_opts": " --cell_id=sZQNDDuS8n -s", "import_complete": 1, "terminal": "tmux"}