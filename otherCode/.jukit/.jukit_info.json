{"cmd": "\n# Cluster Sampling\ndef cluster_sample(vae, category, num_samples=64):\n    \"\"\"\n    Generate samples based on the Gaussian mean of a specific category (cluster).\n    \"\"\"\n    vae.eval()\n    with torch.no_grad():\n        # Generate latent vectors around the mean of the specified category\n        z_mean = vae.gaussian_layer.means[category].unsqueeze(0).repeat(num_samples, 1)\n        z_sample = z_mean + torch.randn_like(z_mean) * 0.1  # Add small noise\n        x_recon = vae.decoder(z_sample).cpu()\n\n        # Save the generated images\n        save_image(x_recon, f'./samples/cluster_category_{category}.png')\n        print(f\"Cluster samples for category {category} saved.\")\n\n# Random Sampling\ndef random_sample(vae, loader, num_classes, std=1.0, num_samples=64):\n    \"\"\"\n    Generate random samples and calculate train/test accuracy based on classifier predictions.\n    \"\"\"\n    vae.eval()\n    correct = 0\n    total = 0\n\n    with torch.no_grad():\n        # Loop over the dataset to calculate accuracy\n        for x, labels in loader:\n            x = x.to('cuda' if torch.cuda.is_available() else 'cpu')\n            labels = labels.to('cuda' if torch.cuda.is_available() else 'cpu')\n\n            # Forward pass through VAE\n            _, _, _, _, y_pred = vae(x)\n\n            # Predicted labels\n            predicted = torch.argmax(y_pred, dim=1)\n\n            # Accuracy calculation\n            correct += (predicted == labels).sum().item()\n            total += labels.size(0)\n\n        accuracy = 100.0 * correct / total\n        print(f\"Accuracy: {accuracy:.2f}%\")\n\n        # Generate samples for each class\n        for category in range(num_classes):\n            z_mean = vae.gaussian_layer.means[category].unsqueeze(0).repeat(num_samples, 1)\n            z_sample = z_mean + torch.randn_like(z_mean) * std\n            x_recon = vae.decoder(z_sample).cpu()\n\n            # Save the generated images\n            save_image(x_recon, f'./samples/random_category_{category}.png')\n            print(f\"Random samples for category {category} saved.\")\n\n# Usage Example\nprint(\"Generating random samples and calculating accuracy on the test set...\")\nrandom_sample(vae, test_loader, num_classes)\n\n", "cmd_opts": " --cell_id=NwHHY3FQJz -s", "import_complete": 1, "terminal": "tmux"}